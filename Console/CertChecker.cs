using System;
using System.Diagnostics;
using System.Net;
using Renci.SshNet;

namespace TlsVersionChecker
{
   public class CertChecker
    {
        public void CheckVulnerabilities(string url)
        {
            try
            {
                // Check Heartbleed vulnerability over HTTPS
                bool heartbleedVulnerable = CheckHeartbleedVulnerability(url);
                Console.WriteLine($"Heartbleed vulnerability for {url}: {(heartbleedVulnerable ? "Vulnerable" : "Not vulnerable")}");

                // Check FTP vulnerability
                bool ftpVulnerable = CheckFTPVulnerability(url);
                Console.WriteLine($"FTP vulnerability for {url}: {(ftpVulnerable ? "Vulnerable" : "Not vulnerable")}");

                // Check SSH vulnerability
                bool sshVulnerable = CheckSSHVulnerability(url);
                Console.WriteLine($"SSH vulnerability for {url}: {(sshVulnerable ? "Vulnerable" : "Not vulnerable")}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while checking vulnerabilities for {url}: {ex.Message}");
            }
        }

        private bool CheckHeartbleedVulnerability(string url)
        {
            try
            {
                Process process = new Process();
                ProcessStartInfo startInfo = new ProcessStartInfo
                {
                    FileName = "openssl",
                    Arguments = $"s_client -connect {url}:443 -tlsextdebug 2>&1 | grep 'server extension \"heartbeat\" (id=15)'",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };
                process.StartInfo = startInfo;
                process.Start();

                string output = process.StandardOutput.ReadToEnd();
                process.WaitForExit();

                return output.Contains("server extension \"heartbeat\" (id=15)");
            }
            catch
            {
                return false; // If an error occurs during the process, consider it as not vulnerable
            }
        }

        private bool CheckFTPVulnerability(string url)
        {
            try
            {
                // Attempt FTP connection
                FtpWebRequest request = (FtpWebRequest)WebRequest.Create($"ftp://{url}");
                request.Method = WebRequestMethods.Ftp.ListDirectory;
                request.Credentials = new NetworkCredential("anonymous", "");

                using (FtpWebResponse response = (FtpWebResponse)request.GetResponse())
                {
                    return true; // If the connection succeeds, consider it as vulnerable
                }
            }
            catch
            {
                return false; // If an error occurs during the connection, consider it as not vulnerable
            }
        }

        private bool CheckSSHVulnerability(string url)
        {
            try
            {
                // Attempt SSH connection
                using (var client = new SshClient(url, "username", "password"))
                {
                    client.Connect();
                    client.Disconnect();
                    return true; // If the connection succeeds, consider it as vulnerable
                }
            }
            catch
            {
                return false; // If an error occurs during the connection, consider it as not vulnerable
            }
        }
    }
}

